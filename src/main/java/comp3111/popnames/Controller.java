/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import java.text.NumberFormat;
import javax.swing.*;

public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;
    
    /*This is for task 1*/
    @FXML
    private Tab tabReport1;

    @FXML
    private TextField T1_N;
    
    @FXML
    private TextField T1_year;
    
    @FXML
    private Button buttonSummaryT1;
    
    @FXML
    private Button buttonTableMT1;
    
    @FXML
    private Button buttonTableFT1;
    
    @FXML
    private Button buttonbarMT1;
    
    @FXML
    private Button buttonbarFT1;
    
    @FXML
    private Button buttonpieMT1;
    
    @FXML
    private Button buttonpieFT1;
    /* task1 ends here */
    
    @FXML
    private Tab tabReport2;
    
    @FXML
    private TextField textfieldYearStart;
    
    @FXML
    private TextField textfieldYearEnd;
    
    @FXML
    private TextField textfieldK;

    @FXML
    private TextField textfieldGender;
    
    @FXML
    private ToggleGroup T11;

    @FXML
    private Tab tabReport3;

    @FXML
    private ToggleGroup T111;

    @FXML
    private Tab tabApp1;
    
    @FXML
    private TextField dadName;
    
    @FXML
    private TextField MomName;
    
    @FXML
    private TextField dYob;
    
    @FXML
    private TextField mYob;
    
    @FXML
    private TextField algorithm;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML
    private ComboBox<String> comboboxGender;

    @FXML
    private Button help_buttonT2;

    @FXML
    private Button buttonSummaryT2;

    @FXML
    private Button buttonDataTableT2;

    @FXML
    private Button buttonBarChartT2;

    @FXML
    private Button buttonPieChartT2;

    @FXML
    private Button help_buttonT5;

    @FXML
    private Button help_buttonT5X1;

    @FXML
    private Button help_buttonT5X2;

    @FXML
    private Button buttonFindT5;

    @FXML
    private TextField textfieldNameT5;

    @FXML
    private TextField textfieldYearT5;

    @FXML
    private ComboBox<String> comboboxGenderT5;

    @FXML
    private ComboBox<String> comboboxPreferredGenderT5;

    @FXML
    private ToggleGroup age;

    @FXML
    private ToggleGroup algo;

    @FXML
    private RadioButton T5X2;

    @FXML
    private RadioButton T5X1;

    @FXML
    private RadioButton Younger;

    @FXML
    private RadioButton Older;

    @FXML
    private TextField textfieldNameItitialT5;

    @FXML
    private Slider consolefontslider;


    /**
     *  Task Zero
     *  To be triggered by the "Summary" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
    /**
     * Task1
     *
     * @author  Liuzijie
     */
    @FXML
    void doTask1() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());;
    	int iYear = Integer.parseInt(T1_year.getText());
    	int totalM = Task1.totalM(iYear);
    	int totalF = Task1.totalF(iYear);
    	oReport += String.format("%s is the most popular name with the number of occurrences of ", AnalyzeNames.getName(iYear, 1, "M"));
    	oReport += String.format("%d,which represents ", Task1.getNumforName(iYear, 1, "M"));
    	/*percent*/
    	oReport += String.format("of total male births in %d. \n", iYear);
    	oReport += String.format("%s is the most popular name with the number of occurrences of ", AnalyzeNames.getName(iYear, 1, "F"));
    	oReport += String.format("%d,which represents ", Task1.getNumforName(iYear, 1, "F"));
    	/*percent*/
    	oReport += String.format("of total female births in %d. \n", iYear);
    	textAreaConsole.setText(oReport);
    }
    @FXML
    void doTableT1M() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());;
    	int iYear = Integer.parseInt(T1_year.getText());
    	oReport += String.format("The table is shown in the prompt window");
    	textAreaConsole.setText(oReport);
    	Task1.TableT1M(iYear,topN,"M");
    }
    @FXML
    void doTableT1F() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());;
    	int iYear = Integer.parseInt(T1_year.getText());
    	oReport += String.format("The table is shown in the prompt window");
    	textAreaConsole.setText(oReport);
    	Task1.TableT1F(iYear,topN,"F");
    }
    @FXML
    void doBarT1M() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());;
    	int iYear = Integer.parseInt(T1_year.getText());
    	oReport += String.format("The bar chart is shown in the prompt window");
    	textAreaConsole.setText(oReport);
    	Task1.BarT1M(iYear,topN,"M");
    }
    
    @FXML
    void doBarT1F() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());;
    	int iYear = Integer.parseInt(T1_year.getText());
    	oReport += String.format("The bar chart is shown in the prompt window");
    	textAreaConsole.setText(oReport);
    	Task1.BarT1F(iYear,topN,"F");
    }
    
    @FXML
    void doPieT1M() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());;
    	int iYear = Integer.parseInt(T1_year.getText());
    	oReport += String.format("The Pie chart is shown in the prompt window");
    	textAreaConsole.setText(oReport);
    	Task1.PieT1(iYear,topN,"M");
    }
    
    @FXML
    void doPieT1F() {
    	String oReport = "";
    	final int topN = Integer.parseInt(T1_N.getText());
    	int iYear = Integer.parseInt(T1_year.getText());
    	oReport += String.format("The Pie chart is shown in the prompt window");
    	textAreaConsole.setText(oReport);
    	Task1.PieT1(iYear,topN,"F");
    }
    @FXML
    void doApp1() {
    	String oReport = "";
    	final int dyob = Integer.parseInt(dYob.getText());
    	final int myob = Integer.parseInt(mYob.getText());
    	final String dadn = dadName.getText();
    	final String momn = MomName.getText();
    	final String alindex = algorithm.getText();
        if (alindex == "T4X1") {
        	oReport += String.format("If your baby is a boy, our recommend name is %s \n", AnalyzeNames.getName(dyob, 1, "M"));
        	oReport += String.format("If your baby is a girl, our recommend name is %s \n", AnalyzeNames.getName(myob, 1, "F"));
        }
        else {
        	oReport += String.format("If your baby is a boy, our recommend name is %s \n", AnalyzeNames.getName(myob, 1, "M"));
        	oReport += String.format("If your baby is a girl, our recommend name is %s \n", AnalyzeNames.getName(dyob, 1, "F"));
        }
        textAreaConsole.setText(oReport);
    }

    /**
     * Displaying the warning message if some input are found to be empty.
     *
     * @author  Li Ho Yin
     */
    void Emptywarning(String error){
        JOptionPane.showMessageDialog(null,
                "Please enter a valid " + error + "! It is empty right now.",
                "Input Error",
                JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Check every input in T2 to see if there are empty
     *
     * @author  Li Ho Yin
     */
    boolean checkEmptyT2(){
        boolean empty = false;
        if (textfieldYearStart.getText().equals("")){
            Emptywarning("Starting Year");
            empty = true;
        }
        if (textfieldYearEnd.getText().equals("")){
            Emptywarning("Ending Year");
            empty = true;
        }
        if (textfieldK.getText().equals("")){
            Emptywarning("Rank K");
            empty = true;
        }
        return empty;
    }

    /**
     * Task 2 - After the user clicked the summary button, send the inputted value to Task2.java to calculate the result.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void doSummaryT2() {
    	String yearstartstring = textfieldYearStart.getText();
    	String yearendstring = textfieldYearEnd.getText();
    	String rankstring = textfieldK.getText();
    	String gender = comboboxGender.getValue();
    	String oReport = "";
    	if (!checkEmptyT2()){
    	    oReport = Task2.getSummaryT2(yearstartstring, yearendstring, rankstring, gender);
        }
    	textAreaConsole.setText(oReport);
        textAreaConsole.setEditable(false);
    }

    /**
     * Task 2 - After the user clicked the Result(Data Table) button, send the inputted value to Task2.java to calculate the result.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void doDataTableT2() {
    	String yearstartstring = textfieldYearStart.getText();
    	String yearendstring = textfieldYearEnd.getText();
    	String rankstring = textfieldK.getText();
        String gender = comboboxGender.getValue();
        String oReport = "";
        if (!checkEmptyT2()){
            oReport = Task2.getDataTableT2(yearstartstring, yearendstring, rankstring, gender);
        }
    	textAreaConsole.setText(oReport);
        textAreaConsole.setEditable(false);
    }

    /**
     * Task 2 - After the user clicked the Result(Bar Chart) button, send the inputted value to Task2.java to calculate the result.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void doBarChartT2() {
    	String yearstartstring = textfieldYearStart.getText();
    	String yearendstring = textfieldYearEnd.getText();
    	String rankstring = textfieldK.getText();
        String gender = comboboxGender.getValue();
        String oReport = "";
        if (!checkEmptyT2()){
            oReport = Task2.getBarChartT2(yearstartstring, yearendstring, rankstring, gender);
        }
    	textAreaConsole.setText(oReport);
        textAreaConsole.setEditable(false);
    }

    /**
     * Task 2 - After the user clicked the Result(Pie Chart) button, send the inputted value to Task2.java to calculate the result.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void doPieChartT2() {
    	String yearstartstring = textfieldYearStart.getText();
    	String yearendstring = textfieldYearEnd.getText();
    	String rankstring = textfieldK.getText();
        String gender = comboboxGender.getValue();
        String oReport = "";
        if (!checkEmptyT2()){
            oReport = Task2.getPieChartT2(yearstartstring, yearendstring, rankstring, gender);
        }
    	textAreaConsole.setText(oReport);
        textAreaConsole.setEditable(false);
    }

    /**
     * Task 2 - After the user clicked the help button, display a help message about the function of Task 2.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void displayHelpT2() {
        JOptionPane.showMessageDialog(null, "Generate a report in response to the queries on the K-th popular names over a given period.","Help Message for T2",JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Task 5 - After the user clicked the help button, display a help message about the function of Task 5.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void displayHelpT5() {
        JOptionPane.showMessageDialog(null, "Seeking advices on identifying the name of a person who would become your soulmate? \n Enter the following information and let's find your soulmate!","Help Message for T5",JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Task 5 - After the user clicked the help button for Algorithm T5X1, display a help message about the function of algorithm T5X1.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void displayHelpT5X1() {
        JOptionPane.showMessageDialog(null, "An algorithm that compute the name of your potential soulmate which is equal to \n the most popular name in your preferred gender in your year of birth.","Help Message for Algorithm T5X1",JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Task 5 - After the user clicked the help button for Algorithm T5X2, display a help message about the function of algorithm T5X2.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void displayHelpT5X2() {
        JOptionPane.showMessageDialog(null, "An algorithm that compute the name of your potential soulmate which is equal to \n most popular name in your preferred gender with your preferred initial (or the same initial as your initial if it is empty) \n from 1880 to your year of birth or from your year of birth to 2019 (determined by your preferred age).","Help Message for Algorithm T5X2",JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Task 5 - After the Find your soulmate button is clicked, send the inputted value to Task5.java to compute the result.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void doFindT5() {
        String name = textfieldNameT5.getText();
        String year = textfieldYearT5.getText();
        String gender = comboboxGenderT5.getValue();
        String preferredGender = comboboxPreferredGenderT5.getValue();
        String preferredInitial = textfieldNameItitialT5.getText();
        String preferredAge = "";
        String Algo = "";
        String oReport = "";
        if (Older.isSelected()){
            preferredAge = "Older";
        }else if (Younger.isSelected()){
            preferredAge = "Younger";
        }
        if (T5X1.isSelected()){
            Algo = "T5X1";
        }else if (T5X2.isSelected()){
            Algo = "T5X2";
        }
        boolean empty = false;
        if (name.equals("")){
            Emptywarning("Name");
            empty = true;
        }
        if (year.equals("")){
            Emptywarning("Year of Birth");
            empty = true;
        }
        if (preferredAge.equals("")){
            Emptywarning("Preferred Age");
            empty = true;
        }
        if (Algo.equals("")){
            Emptywarning("Algorithm");
            empty = true;
        }
        if (!name.equals("")){
            name = name.toLowerCase();
            StringBuilder nameString = new StringBuilder(name);
            nameString.setCharAt(0, Character.toUpperCase(name.charAt(0)));
            name = nameString.toString();
        }
        if (preferredInitial.equals("")){
            if (!name.equals("")) {
                preferredInitial = String.valueOf(name.charAt(0));
            }
        }else{
            preferredInitial = preferredInitial.toUpperCase();
        }
        if (!empty){
            if (Algo.equals("T5X1")) {
                oReport = Task5.doFindT5X1(name, year, gender, preferredInitial, preferredGender, preferredAge);
            }else if (Algo.equals("T5X2")){
                oReport = Task5.doFindT5X2(name, year, gender, preferredInitial, preferredGender, preferredAge);
            }
        }
        //System.out.println(Older.isSelected());
        textAreaConsole.setText(oReport);
        textAreaConsole.setEditable(false);
    }

    /**
     * UI
     * A slider that allows the user to adjust the font size of the console.
     *
     * @author  Li Ho Yin
     */
    @FXML
    void doConsolefontChanged(){
        int size = (int) consolefontslider.getValue();
        String style = "-fx-font-size: " + size;
        textAreaConsole.setStyle(style);
    }


}

